---
layout: post
title:  "CO@Work2020 - Theory and Basics"
date:   2020-09-27 18:00:08
categories: 최적화
comments: true 
use_math: true
---
-----

<div style = "font-weight:500; font-size:1.0em; margin-left: 1em; margin-right: 1em;text-align:justify; ">

<!-- <div style = "font-weight:500; font-size:1.0em; text-align:justify; "> -->
<embed src="/CO@WORK/Berthold_Theory_II.pdf" type="application/pdf" width="100%" height="425px" />
<br><br>
<span style = "font-weight:700; font-size:1.3em;  margin-right: 1em;">
Simplex Algorithm
</span>
<br><br>
<b style = "color:#d7385e;font-size:1.2">심플렉스 알고리즘</b>은 기하학적 직관(geometry intuition)으로 다음과 같이 나타낼 수 있다. 
<br><br>
<p align="center">
<img src="/images/simplex_ex.png" width="200" height="200">
</p>
<br>
그림에서 보이듯 알고리즘은 어떤 꼭짓점(vertex)에서 꼭짓점으로 이동한다. 두 꼭짓점 사이의 변(edge)을 따라서 움직이며 현재 위치에서 목적 함수값을 좋게 하는 근처 꼭짓점으로 이동한다. 이러한 프로세스를 pivoting이라 하고 만약 더 이상 목적 함수값을 개선하는 꼭짓점이 없다면 알고리즘은 종료된다. 즉, 현재 위치가 optimal solution이 되는 것이다. 이 때 만약 목적함수가 ray를 따라 움직인다면 이는 LP가 unbounded가 되는 것을 증명한다. 
<br><br>
심플렉스 알고리즘의 특징은 다음과 같이 정리할 수 있다.
<ol>
<li>목적함수가 polyhedron의 경계(boundary)에서 최적이 된다. <b style = "color:#d7385e;font-size:1.2">(convexity)</b></li>
<li>최적해는 항상 꼭짓점에 존재하며 이 때 목적함수와 모든 제약식은 선형이어야 한다. <b style = "color:#d7385e;font-size:1.2">(linearity)</b></li>
<li>local optimality가 global optimality와 동일하다. <b style = "color:#d7385e;font-size:1.2">(convexity)</b></li>
</ol>
심플렉스 알고리즘은 convexity를 따르기 때문에 목적함수가 polyhedron의 경계(boundary)에서 최적이 된다. (만약 optimal inner point가 있었다면 목적함수의 방향으로 계속 움직이며 개선되었을 것이다.) 또한, optimal solution은 항상 꼭짓점에 존재하는데 이 때 목적함수와 모든 제약식은 선형이어야 한다. 만약 optimal solution이 어떤 고차원 면(face) 내부에 있다면 이 면은 목적함수의 normal vector와 직교해야만 가능하다. 그러나 이 면은 목적함수의 fixed level 안에 내포되어 있으므로 같은 목적함수 값을 가진 점을 찾을 수 있다. 심플렉스 알고리즘은 근처 꼭짓점에서 목적함수를 개선할 수 없으면 종료되고 이 솔루션이 optimal solution이 된다. 이는 local optimality가 global optimality와 동일하고 convexity를 따르기 때문이다. 
<br><br>
$$
\begin{aligned}
    \min \quad &c^Tx \\
     s.t. \quad &Ax = b \\
     & x \in R^n_{\geq 0}
\end{aligned}
$$

심플렉스 알고리즘은 주로 <b style = "color:#d7385e;font-size:1.2">simplex tableaus</b>를 계산하는 대수적인 방법(algebraic way)으로 소개된다. 이 때 대부분의 변수는 0이 되고 0이 아닌 변수의 수는 제약식의 수에 따라 bounded 된다. 이는 basic solution에 대한 중요한 개념이다. standard form에서 LP의 제약식 행렬 $A$는 full row rank를 가지며 여기서 full row rank란 한 행에서 전부 선형 독립임을 뜻한다. 
<br><br>
위 식에서 행렬 $A$와 $x$를 다음과 같이 표현해보자. 
<br><br>
<p align="center">
<img src="/images/matrixA.png" width="350" height="150">
</p>
보통 변수의 개수를 $n$개, 제약식의 개수를 $m$개로 표현하는데 $A_B$를 non-singular $(m,m)$ submatrix라 하면 basic solution ($\tilde{x}_B$)과 non-basic solution ($\tilde{x}_{N}$)을 다음과 같이 표현할 수 있다.  
$$
\begin{aligned}
    Ax = b \quad \rightarrow \quad B x_B + N x_N = b \quad \rightarrow \quad B x_B = b 
\end{aligned}
$$
$$
\begin{aligned}
    \therefore \tilde{x}_B = A^{-1}_{B}b, \quad \tilde{x}_{N} = 0
\end{aligned}
$$
즉, basic solution은 역행렬 $A^{-1}_{B}$와 우변 $b$를 곱하면 얻을 수 있고 이외의 모든 변수는 nonbasic이 되며 모두 0의 값을 가진다. 심플렉스 알고리즘은 위 식처럼 standard form에서 시작해야하는데 이 때 꼭짓점은 $n$개의 hyperplane의 교집합이고 이 중 $m$개만이 제약식이기 때문에 다른 $n-m$개는 좌표평면이므로 변수값이 0이 되는 것이다. 

<br><br>
심플렉스 알고리즘의 아이디어는 LP가 optimal solution을 갖는다면 꼭짓점 중 하나에서 항상 optimal soltuion을 갖는 것에서 시작했다. 각 꼭짓점에 대해 basic solution이 있고 항상 optimal basic solution이 있다. 이는 이론적으로 행렬의 모든 가능한 bases를 제거함으로써 LP를 풀 수 있다는 의미이다. (제거해야하는 가능한 솔루션 후보의 수는 유한하게 있다.) 따라서 심플렉스 알고리즘의 아이디어는 feasible start basis를 찾은 후 feasibility를 유지하면서 목적함수값을 좋게 만다는 basis에 있는 column 중 하나와 non-basis에 있는 column을 바꾸면서 optimal solution을 찾을 때까지 반복하는 것이다. (즉, 수많은 방향 중 basic diretion으로 계속 이동하며 optimal을 찾는 것이다.)
<br><br>
그렇다면 pivoting할 column은 어떻게 고르는 것일까? 이는 reduced cost 계산을 통해 고르게 되는데 reduced cost를 계산하면 어떤 방향으로 갔을 때 얼만큼 목적함수 값을 좋게 하는지 알 수 있다. 만약 모든 reduced cost 값이 non-negative인 경우 현재 솔루션이 optimal이 된다. 심플렉스 알고리즘 방법을 간단한 예시로 알아보자. 
<!-- <b style = "color:#d7385e;font-size:1.2"></b>
$$
\begin{aligned}
    \max\{y^Tb| y^TA \leq c, y \geq 0\}  \leq  \min\{c^Tx| Ax \geq b, x \geq 0\}
\end{aligned}
$$
<p align="center">
<img src="/images/degeneracy.png" width="500" height="150">
</p> -->


<br><br>


강의 영상 : <a href= "https://www.youtube.com/watch?v=5FDzY4xFYIY&feature=youtu.be"> Theory and Basics </a>
 </div>

